YARN
Yet Another Resource Negotiator
通用的资源管理系统

YARN架构：
1） ResourceManager : RM
	整个集群提供服务的RM只有一个，提交一个作业/杀死一个作业
	组件： Scheduler and ApplicationsManager.
2） NodeManager  :  NM
	集群中有多个，负责自己本身节点资源管理和使用
	定时向RM汇报本节点的资源使用情况
	接受并处理来自RM的命令 比如启动Container
	处理来自AM的命令
3） ApplicationMaster :  AM
	每个应用程序对应一个AM(Map Reduce，Spark)，负责应用程序的管理
	为应用程序向RM申请资源，分配给内部Task
	需要与NM通信：启动/停止task
4） Container
	封装了CPU，Memory资源的一个容器，一个任务运行环境的抽象
5） Client
	提交作业
	查询作业的运行进度
	杀死作业

etc/hadoop/mapred-site.xml:
<configuration>
    <property>
        <name>mapreduce.framework.name</name>
        <value>yarn</value>
    </property>
</configuration>

etc/hadoop/yarn-site.xml:
<configuration>
    <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
    </property>
    <property>
        <name>yarn.nodemanager.env-whitelist</name>
        <value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME</value>
    </property>
</configuration>

  $ sbin/start-yarn.sh
  $ sbin/stop-yarn.sh
	